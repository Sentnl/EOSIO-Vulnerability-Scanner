import os
import openai
import fnmatch


def find_files(path, extensions):
    found_files = []

    for root, _, filenames in os.walk(path):
        for ext in extensions:
            for filename in fnmatch.filter(filenames, f'*.{ext}'):
                found_files.append(os.path.join(root, filename))

    return found_files

def split_code_into_chunks(code, max_tokens, overlap_tokens):
    lines = code.splitlines()
    tokens = openai.api.encode(code)
    chunks = []
    start_token = 0
    while start_token < len(tokens):
        end_token = start_token + max_tokens
        while end_token < len(tokens) and tokens[end_token] != 0x0A:  # Look for newline character
            end_token -= 1
        chunk_text = openai.api.decode(tokens[start_token:end_token+1])
        chunks.append(chunk_text)
        start_token = end_token + 1 - overlap_tokens
    return chunks

def scan_eosio_file(file_path, api_key, engine, max_tokens=200, overlap_tokens=50):
    # Connect to the OpenAI API
    openai.api_key = api_key

    # Read the Solidity file content
    with open(file_path) as f:
        solidity_code = f.read()

    # Split the code into smaller chunks
    code_chunks = split_code_into_chunks(solidity_code, max_tokens, overlap_tokens)

    vulnerabilities = []
    for i, chunk in enumerate(code_chunks):
        line_start = i * max_tokens + 1
        line_end = line_start + max_tokens - 1
        total_chunks = len(code_chunks)

        if i == 0:
            prompt = f"Analyze vulnerabilities in the following EOSIO smart contract code. The code is divided into chunks. This is chunk {i+1}/{total_chunks} (lines {line_start}-{line_end}):\n{chunk}\n\nPlease wait for all the chunks to complete before analyzing and providing your answer with the line numbers of where the vulnerabilities exist."
        else:
            prompt = f"Here is chunk {i+1}/{total_chunks} (lines {line_start}-{line_end}):\n{chunk}\n\nPlease wait for all the chunks to complete before analyzing and providing your answer with the line numbers of where the vulnerabilities exist."

        # Make a request to the OpenAI API to analyze the Solidity file
        result = openai.Completion.create(engine=engine, prompt=prompt, max_tokens=1000, n=1, stop=None, temperature=0.5)
        vulnerabilities.append(result.choices[0].text.strip())

    return "\n".join(vulnerabilities)



def main():
    api_key = os.environ['INPUT_OPENAI_API_KEY']
    engine = os.environ['INPUT_ENGINE']
    repo_path = os.getcwd()
    file_extensions = ['cpp', 'hpp']
    target_files = find_files(repo_path, file_extensions)

    for file in target_files:
        print(f"Scanning {file}...")
        vulnerabilities = scan_eosio_file(file, api_key, engine)
        with open(f"{file}_vulnerabilities.txt", "w") as f:
            f.write("Service provided to you by www.sentnl.io.\n")
            f.write(f"Vulnerabilities found in {file}:\n{vulnerabilities}\n")

if __name__ == "__main__":
    main()
